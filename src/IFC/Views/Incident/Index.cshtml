@model IEnumerable<IFC.Domain.Entities.Incident>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table" id="incidentDatatable">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.IncidentDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsDeleted)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsActive)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Location)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Organization)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SuspectsProfile)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Wing)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @* @foreach (var item in Model)
        {
        <tr>
        <td>
        @Html.DisplayFor(modelItem => item.IncidentDate)
        </td>
        <td>
        @Html.DisplayFor(modelItem => item.IsDeleted)
        </td>
        <td>
        @Html.DisplayFor(modelItem => item.IsActive)
        </td>
        <td>
        @Html.DisplayFor(modelItem => item.Location.Name)
        </td>
        <td>
        @Html.DisplayFor(modelItem => item.Organization.Name)
        </td>
        <td>
        @item.SuspectsProfile.FirstName @item.SuspectsProfile.LastName
        <td>
        @Html.DisplayFor(modelItem => item.Wing.Id)
        </td>
        <td>
        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
        <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
        </td>
        </tr>
        }*@
    </tbody>
</table>

@section Styles{
    <link rel="stylesheet" href="~/lib/datatables/css/dataTables.bootstrap4.min.css" asp-append-version="true" />
}

    @section Scripts{
    <script src="~/lib/momentjs/moment.min.js" asp-append-version="true"></script>
    <script src="~/lib/datatables/js/jquery.dataTables.min.js" asp-append-version="true"></script>
    <script src="~/lib/datetime-moment/datetime-moment.js" asp-append-version="true"></script>
    <script src="~/lib/datatables/js/dataTables.bootstrap4.js" asp-append-version="true"></script>
    <script src="~/lib/datatables-buttons/dataTables.buttons.min.js" asp-append-version="true"></script>
    }
    <script>
        var table;

        $(document).ready(function () {
            $.fn.dataTable.moment("DD/MM/YYYY HH:mm:ss");
            $.fn.dataTable.moment("DD/MM/YYYY");

            table = $("#incidentDatatable").DataTable({
                // Design Assets
                stateSave: true,
                autoWidth: true,
                // ServerSide Setups
                processing: true,
                serverSide: true,
                // Paging Setups
                paging: true,
                // Custom Export Buttons
                dom: 'Bfrtip',
                buttons: [
                    {
                        text: 'Excel',
                        action: function () {
                            exportToExcel();
                        }
                    },
                    {
                        text: 'CSV',
                        action: function () {
                            exportToCsv();
                        }
                    },
                    {
                        text: 'HTML',
                        action: function () {
                            exportToHtml();
                        }
                    }
                ],
                // Searching Setups
                searching: { regex: true },
                // Ajax Filter
                ajax: {
                    url: "/Incident/LoadTable",
                    type: "POST",
                    contentType: "application/json",
                    dataType: "json",
                    data: function (d) {
                        return JSON.stringify(d);
                    }
                },
                // Columns Setups
                columns: [
                    { data: "id" },
                    { data: "location" },
                    { data: "organization" },
                    { data: "suspectsProfile" },
                    { data: "Wing" },
                    {
                        data: "incidentDate",
                        render: function (data, type, row) {
                            // If display or filter data is requested, format the date
                            if (type === "display" || type === "filter") {
                                return moment(data).format("ddd DD/MM/YYYY HH:mm:ss");
                            }
                            // Otherwise the data type requested (`type`) is type detection or
                            // sorting data, for which we want to use the raw date value, so just return
                            // that, unaltered
                            return data;
                        }
                    },
                ],
                // Column Definitions
                columnDefs: [
                    { targets: "no-sort", orderable: false },
                    { targets: "no-search", searchable: false },
                    {
                        targets: "trim",
                        render: function (data, type, full, meta) {
                            if (type === "display") {
                                data = strtrunc(data, 10);
                            }

                            return data;
                        }
                    },
                    { targets: "date-type", type: "date-eu" },
                    {
                        targets: 10,
                        data: null,
                        defaultContent: "<a class='btn btn-link' role='button' href='#' onclick='edit(this)'>Edit</a>",
                        orderable: false
                    },
                ]
            });
        });

        function strtrunc(str, num) {
            if (str.length > num) {
                return str.slice(0, num) + "...";
            }
            else {
                return str;
            }
        }

        function edit(rowContext) {
            if (table) {
                var data = table.row($(rowContext).parents("tr")).data();
                alert("Example showing row edit with id: " + data["id"] + ", name: " + data["name"]);
            }
        }

        function renderDownloadForm(format) {
            $('#export-to-file-form').attr('action', '/TestRegisters/ExportTable?format=' + format);

            // Get jQuery DataTables AJAX params
            var datatableParams = $('#test-registers').DataTable().ajax.params();

            // If the input exists, replace value, if not create the input and append to form
            if ($("#export-to-file-form input[name=dtParametersJson]").val()) {
                $('#export-to-file-form input[name=dtParametersJson]').val(datatableParams);
            } else {
                var searchModelInput = $("<input>")
                    .attr("type", "hidden")
                    .attr("name", "dtParametersJson")
                    .val(datatableParams);

                $('#export-to-file-form').append(searchModelInput);
            }
        }

        function exportToExcel() {
            renderDownloadForm("excel");

            $("#export-to-file-form").submit();
        }

        function exportToCsv() {
            renderDownloadForm("csv");

            $("#export-to-file-form").submit();
        }

        function exportToHtml() {
            renderDownloadForm("html");

            $("#export-to-file-form").submit();
        }
    </script>